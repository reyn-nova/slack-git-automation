on:
  pull_request:
    types: [opened, closed]

jobs:
  PR-Created:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_URL: ${{ github.event.pull_request.html_url }}
      PR_OPENER: ${{ github.event.pull_request.user.login }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Join requested reviewers
        run: |
          # Extract the requested reviewers' logins from the event payload and convert to JSON
          reviewers_json=$(echo '${{ toJson(github.event.pull_request.requested_reviewers) }}')

          # Use jq to extract the login names and join them with commas
          joined_reviewers=$(echo "$reviewers_json" | jq -r 'map(.login) | join(",")')

          # Output the joined reviewers
          echo "Joined reviewers: $joined_reviewers"
          echo "::set-output name=reviewers::$joined_reviewers"
        id: join-reviewers

      - name: Sending Slack Message
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_USER_TOKEN: ${{ secrets.SLACK_USER_TOKEN }}
        with:
          channel-id: ${{ secrets.SLACK_TARGET_CHANNEL_ID }}
          payload: |
            {
              "text": "PR for \"${{ env.PR_TITLE}}\" (${{ env.BRANCH_NAME }})\n${{ env.PR_URL }}\n\nOpened by: ${{ env.PR_OPENER }}\nRequested Reviewers: ${{ steps.join-reviewers.outputs.reviewers }}"
            }

      - name: Find message in Slack
        env:
          SLACK_USER_TOKEN: ${{ secrets.SLACK_USER_TOKEN }}
        run: |
          #!/bin/bash

          # Define the channel and the query
          CHANNEL_ID="YOUR_CHANNEL_ID"
          QUERY="Your search query"

          # Call the Slack API to search for messages
          response=$(curl -s -X GET "https://slack.com/api/search.messages" \
            -H "Authorization: Bearer $SLACK_USER_TOKEN" \
            -G --data-urlencode "query=${{ env.BRANCH_NAME }}" \
            -G --data-urlencode "channel=${{ secrets.SLACK_TARGET_CHANNEL_ID }}")

          # Print the response
          echo "$response"

          # Optionally, you can parse the response to get specific information
          # For example, using jq to parse JSON
          echo "$response" | jq '.messages.matches[] | {username: .username, text: .text, timestamp: .ts}'

  PR-Closed:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_URL: ${{ github.event.pull_request.html_url }}
      PR_OPENER: ${{ github.event.pull_request.user.login }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      PR_MERGER: ${{ github.event.pull_request.merged_by.login }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Join requested reviewers
        run: |
          # Extract the requested reviewers' logins from the event payload and convert to JSON
          reviewers_json=$(echo '${{ toJson(github.event.pull_request.requested_reviewers) }}')

          # Use jq to extract the login names and join them with commas
          joined_reviewers=$(echo "$reviewers_json" | jq -r 'map(.login) | join(",")')

          # Output the joined reviewers
          echo "Joined reviewers: $joined_reviewers"
          echo "::set-output name=reviewers::$joined_reviewers"
        id: join-reviewers

      - name: Sending Slack Message
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_USER_TOKEN: ${{ secrets.SLACK_USER_TOKEN }}
        with:
          channel-id: ${{ secrets.SLACK_TARGET_CHANNEL_ID }}
          payload: |
            {
              "thread_ts": "PR for \"${{ env.PR_TITLE}}\" (${{ env.BRANCH_NAME }})\n${{ env.PR_URL }}\n\nOpened by: ${{ env.PR_OPENER }}\nRequested Reviewers: ${{ steps.join-reviewers.outputs.reviewers }}",
              "text": "Merged by ${{ env.PR_MERGER }}"
            }
